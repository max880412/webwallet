<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Dashboard - Mi Wallet BEP20</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
</head>
<body>
    <div class="container">
        <h2>Dashboard</h2>
        <% if (wallet) { %>
            <div id="walletInfo">
                <p><strong>Dirección:</strong> <span id="walletAddress"><%= wallet.walletAddress %></span></p>
                <p><strong>Llave Privada:</strong> <span id="walletPrivateKey"><%= wallet.privateKey %></span></p>
                <p><strong>Balance USDT:</strong> <span id="walletBalance">Cargando...</span></p>
            </div>
            <div>
                <h3>Enviar USDT</h3>
                <div>
                    <label>Dirección destino:</label>
                    <input type="text" id="toAddress">
                </div>
                <div>
                    <label>Cantidad:</label>
                    <input type="number" id="amount">
                </div>
                <button id="sendTxBtn">Enviar Transacción</button>
            </div>
            <div>
                <h3>Log de Transacciones</h3>
                <div id="txLog">Cargando...</div>
            </div>
        <% } else { %>
            <h3>No tienes una wallet creada</h3>
            <button id="createWalletBtn">Crear Wallet</button>
        <% } %>
        <p><a href="/logout">Cerrar sesión</a></p>
    </div>
    <script>
    const usdtContractAddress = "0x55d398326f99059fF775485246999027B3197955";
    const usdtAbi = [
        "function balanceOf(address) view returns (uint256)",
        "function transfer(address to, uint256 amount) returns (bool)"
    ];
    
    <% if (wallet) { %>
    // Wallet ya creada: usar la llave privada para interactuar con la red
    const provider = new ethers.providers.JsonRpcProvider("https://bsc-dataseed.binance.org/");
    const walletPrivateKey = "<%= wallet.privateKey %>";
    const walletAddress = "<%= wallet.walletAddress %>";
    const walletSigner = new ethers.Wallet(walletPrivateKey, provider);
    
    async function updateBalance() {
        const contract = new ethers.Contract(usdtContractAddress, usdtAbi, provider);
        try {
            const balance = await contract.balanceOf(walletAddress);
            document.getElementById("walletBalance").innerText = ethers.utils.formatUnits(balance, 18);
        } catch (err) {
            console.error(err);
            document.getElementById("walletBalance").innerText = "Error";
        }
    }
    
    async function updateTxLog() {
        try {
            const res = await fetch('/transactions');
            const txs = await res.json();
            const txLog = document.getElementById("txLog");
            if (txs.length === 0) {
                txLog.innerHTML = "<p>No hay transacciones registradas.</p>";
            } else {
                txLog.innerHTML = txs.map(tx => {
                    return `<div>
                        <p><strong>Hash:</strong> ${tx.txHash}</p>
                        <p><strong>Desde:</strong> ${tx.fromAddress} <strong>Para:</strong> ${tx.toAddress}</p>
                        <p><strong>Valor:</strong> ${ethers.utils.formatUnits(tx.value, 18)} USDT</p>
                        <p><strong>Dirección:</strong> ${tx.direction}</p>
                        <hr>
                    </div>`;
                }).join("");
            }
        } catch (err) {
            console.error(err);
        }
    }
    
    document.getElementById("sendTxBtn").addEventListener("click", async () => {
        const toAddress = document.getElementById("toAddress").value.trim();
        const amount = document.getElementById("amount").value;
        if (!ethers.utils.isAddress(toAddress)) {
            alert("Dirección de destino inválida.");
            return;
        }
        if (!amount || amount <= 0) {
            alert("La cantidad debe ser mayor a 0.");
            return;
        }
        try {
            const contract = new ethers.Contract(usdtContractAddress, usdtAbi, walletSigner);
            const amountWei = ethers.utils.parseUnits(amount, 18);
            const txResponse = await contract.transfer(toAddress, amountWei);
            alert("Transacción enviada. Hash: " + txResponse.hash);
            await txResponse.wait();
            updateBalance();
            updateTxLog();
            // Aquí se podría enviar la transacción al servidor para almacenarla en la DB
        } catch (err) {
            console.error(err);
            alert("Error al enviar la transacción.");
        }
    });
    
    updateBalance();
    updateTxLog();
    setInterval(updateBalance, 30000);
    setInterval(updateTxLog, 30000);
    <% } else { %>
    // Si no existe wallet, se crea al hacer clic en el botón
    document.getElementById("createWalletBtn").addEventListener("click", async () => {
        const provider = new ethers.providers.JsonRpcProvider("https://bsc-dataseed.binance.org/");
        const wallet = ethers.Wallet.createRandom();
        // Mostrar información en pantalla y guardar en la base de datos
        document.body.innerHTML = `
            <div class="container">
                <h2>Wallet Creada</h2>
                <p><strong>Dirección:</strong> ${wallet.address}</p>
                <p><strong>Llave Privada:</strong> ${wallet.privateKey}</p>
                <p>Recarga la página para ver la wallet en el dashboard.</p>
                <a href="/">Ir al Dashboard</a>
            </div>
        `;
        await fetch('/create-wallet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ walletAddress: wallet.address, privateKey: wallet.privateKey })
        });
    });
    <% } %>
    </script>
</body>
</html>
